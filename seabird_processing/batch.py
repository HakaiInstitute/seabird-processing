"""
This module contains the Batch class.

The Batch class allows for the chaining of SBE commands to run on data. This
is useful for running multiple commands on the same data without having to
write the data to disk between each command.
"""
import subprocess
from pathlib import Path
from tempfile import TemporaryDirectory
from typing import Iterable

from seabird_processing.configs import _SBEConfig
from seabird_processing.logger import logger


class Batch(object):
    """A pipeline of SBE commands to run on data.

    This class allows for the chaining of SBE commands to run on data. This is
    useful for running multiple commands on the same data without having to
    write the data to disk between each command.
    """

    config_header_comment = "@ Generated by the seabird-processing Python package"

    def __init__(self, stages: Iterable[_SBEConfig]):
        """
        Args:
            stages: (Iterable[_SBECommand]) The stages to run on the data
        Returns:
            Pipeline: The pipeline object
        """
        super().__init__()
        self.stages = stages

    def get_batch_config_str(self, input_file_pattern: str) -> str:
        """Get the batch configuration string.

        Args:
            input_file_pattern (str): A pattern to match initial input files
        Returns:
            str: The batch configuration string
        """
        batch_config_str = [self.config_header_comment]
        input_pattern = input_file_pattern
        for config in self.stages:
            batch_config_str.append(config.get_exec_str(input_pattern, batch_mode=True))
            input_pattern = Path(config.output_file_path(input_pattern))

        return "\n".join(batch_config_str)

    @property
    def timeout(self) -> int:
        """Get the timeout for the batch command.

        Returns:
            int: The timeout for the batch command
        """
        return sum([stage.timeout for stage in self.stages])

    def run(self, input_file_pattern: str):
        """Run the pipeline on the data.

        Args:
            input_file_pattern (str): A pattern to match initial input files
        Returns:
            str: The processed data
        """
        with TemporaryDirectory() as temp_dir:
            with open(Path(temp_dir) / "config.txt", "w") as config_file:
                config_file.write(self.get_batch_config_str(input_file_pattern))
            try:
                ps = subprocess.run(
                    ["sbebatch", config_file.name],
                    timeout=self.timeout,
                    check=True,
                    shell=True,
                    stdout=subprocess.PIPE,
                    stderr=subprocess.PIPE,
                )
                if ps.stdout:
                    logger.debug(ps.stdout)
            except subprocess.CalledProcessError as e:
                if e.stderr:
                    logger.error(e.stderr)
                raise e
